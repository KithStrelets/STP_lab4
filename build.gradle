group 'org.jacoco'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'jacoco'

sourceCompatibility = 1.6
targetCompatibility = 1.6

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDir "src/main/"
    test.java.srcDir "src/test/"
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar{
    manifest.attributes "Main-Class": "Lab4"//"Hello"
}

task codeCoverageReport(type: JacocoReport) {

	def coverageSourceDirs = [
    'src/main/java',
]

    executionData = fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    classDirectories = fileTree(dir: "${project.buildDir}/classes/java/main")
    sourceDirectories = files(coverageSourceDirs)
	
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.task(test)
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
   main = "com.codacy.CodacyCoverageReporter"
   classpath = configurations.codacy
   args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/test-results/jacoco/${archivesBaseName}.xml"
           ]
}

task (codacyDepsize) << {
def size = 0;
configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"

configurations
        .codacy
        .sort { -it.length() }
        .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
}

task (codacyLocs) << {
    configurations.codacy.each {
        String jarName = it
        println jarName
    }
}

check.dependsOn(jacocoTestReport)
